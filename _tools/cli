#!/bin/bash

SXV4_CONSOLE_VERSION=3.9.109
SHARED_TEMPLATE_NAME=_startx.tpl
SHARED_TEMPLATE=_tools/$SHARED_TEMPLATE_NAME
SHARED_NAME=_sample_
SHARED_SAMPLE=_tools/$SHARED_NAME
SHARED_SAMPLE_RESOURCE=_tools/sample/templates/example.yaml
REPO_PACKAGE_DIR=docs/packages
BRANCH_NAME=devel
GITHUB_USER=startxfr
GITHUB_REPOSITORY=helm-repository


#####################
## GENERICS FUNCTIONS

# read chart version
function chartReadVersion {
    if [[ "" != "$1" ]]; then
        echo $(cat $PROJECT_CHARTPATH/$1/Chart.yaml | yq -r .version)
    else
        echo ""
    fi
}

# read chart description
function chartReadDescription {
    if [[ "" != "$1" ]]; then
        echo $(cat $PROJECT_CHARTPATH/$1/Chart.yaml | yq -r .description)
    else
        echo ""
    fi
}

# read chart name
function chartReadName {
    if [[ "" != "$1" ]]; then
        echo $(cat $PROJECT_CHARTPATH/$1/Chart.yaml | yq -r .name)
    else
        echo ""
    fi
}

# read chart appVersion
function chartReadAppVersion {
    if [[ "" != "$1" ]]; then
        echo $(cat $PROJECT_CHARTPATH/$1/Chart.yaml | yq -r .appVersion)
    else
        echo ""
    fi
}




##########################
## ROUTER GLOBALS COMMANDS

# router for delete sub-command
function routerList {
    echo -e "\e[31mList\e[0m helm chart in $PROJECT_CHARTPATH"
    cd $PROJECT_CHARTPATH
    local LIST=$(ls -d -I "_*" -I "docs" *)
    cd - &>/dev/null
    for chart in $LIST; do
        echo -e " - $chart"
    done
}

# router for publish command
function routerPublish {
    local repo_url="https://$GITHUB_USER.github.io/$GITHUB_REPOSITORY"
    local branch_current="master"
    local branch_target="master"
    if [[ "$branch_current" != "$BRANCH_NAME" ]]; then
        branch_current="$BRANCH_NAME"
    fi
    echo -e "\e[36mPublish\e[0m Generate index for $repo_url"
    helm repo index --url $repo_url/packages/ $PROJECT_PATH/docs/packages/
    echo -e "\e[36mPublish\e[0m versionning of index for $repo_url"
    git add $PROJECT_PATH/docs/packages &>/dev/null
    git commit -m "[docs] update repository index" $PROJECT_PATH/docs/packages &>/dev/null
    git push origin $branch_current
    if [[ "$branch_current" != "$branch_target" ]]; then
        echo -e "\e[36mPublish\e[0m merge \e[1m$branch_current\e[0m into \e[1m$branch_target\e[0m"
        git checkout $branch_target &>/dev/null
        git merge --commit $branch_current
        echo -e "\e[36mPublish\e[0m push \e[1m$branch_current\e[0m and \e[1m$branch_target\e[0m"
        git push origin $branch_target $branch_current
        git checkout $branch_current
    else 
        echo -e "\e[36mPublish\e[0m push \e[1m$branch_current\e[0m"
        git push origin $branch_target
    fi
}

# router for release command
function routerRelease {
    local auto_feature=$1
    local repo_url="https://$GITHUB_USER.github.io/$GITHUB_REPOSITORY"
    local branch_current="master"
    local branch_origin="master"
    local next_description="publish stable update for the full repository"
    local current_release="$(cat $PROJECT_PATH/_tools/repo-release)"
    local next_release=$(cat $PROJECT_PATH/_tools/repo-release | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
    if [[ "$branch_current" != "$BRANCH_NAME" ]]; then
        branch_current="$BRANCH_NAME"
    fi
    if [[ "auto" == "$auto_feature" || "-a" == "$auto_feature" ]]; then
        echo -e "\e[36mRelease\e[0m \e[1mrepository\e[0m auto-version to $next_release"
    else
        echo -en "\e[36mRelease\e[0m \e[1mrepository\e[0m Set repository next version [$next_release] : "
        read nextRel
        if [[ "$nextRel" != "" ]]; then
            next_release=$nextRel
        fi
        echo -en "\e[36mRelease\e[0m \e[1mrepository\e[0m Set repository release description [$next_description] : "
        read nextDesc
        if [[ "$nextDesc" != "" ]]; then
            next_description="$nextDesc"
        fi
    fi
    echo -e "\e[36mRelease\e[0m commit all change to $GITHUB_REPOSITORY respository"
    echo $next_release > $PROJECT_PATH/_tools/repo-release
    git add $PROJECT_PATH &>/dev/null
    git commit -m "[docs] update repository content to $next_release" $PROJECT_PATH &>/dev/null
    git checkout $branch_origin &>/dev/null
    git add $PROJECT_PATH &>/dev/null
    git commit -m "[docs] update repository content" $PROJECT_PATH &>/dev/null
    echo -e "\e[36mRelease\e[0m Jump into \e[1m$current_release\e[0m"
    git checkout $current_release &>/dev/null
    echo -e "\e[36mRelease\e[0m Merge \e[1m$branch_origin\e[0m update to \e[1m$current_release\e[0m"
    git merge --commit $branch_origin &>/dev/null
    echo -e "\e[36mRelease\e[0m Create \e[1m$next_release\e[0m tag"
    git tag $next_release -m "[release/$next_release] $next_description"
    echo -e "\e[36mRelease\e[0m push \e[1m$next_release\e[0m to remote repository"
    git push origin $next_release $branch_origin
    git checkout $branch_current
}

# router for version sub-command
function routerVersion {
    echo "sx console version : sx-helm $SXV4_CONSOLE_VERSION"
    echo -n "Openshift : "
    oc version 
    echo -n "Helm : "
    helm version --short
}



#################################
## ROUTER HELM-CHART SUB-COMMANDS

# router for chart info sub-command
function routerChartInfo {
    local chart_name=$1
    if [[ "" != "$chart_name" ]]; then
        local current_name=$(chartReadName $chart_name)
        local current_release=$(chartReadVersion $chart_name)
        local current_desc=$(chartReadDescription $chart_name)
        local current_apprelease=$(chartReadAppVersion $chart_name)
        echo -e "\e[32mInfo\e[0m about \e[1m$chart_name\e[0m helm chart"
        echo -e "- \e[1mPackage\e[0m     : $chart_name-$current_release"
        echo -e "- \e[1mVersion\e[0m     : $current_release"
        echo -e "- \e[1mName\e[0m        : $current_name"
        echo -e "- \e[1mDescription\e[0m : $current_desc"
        echo -e "- \e[1mApp version\e[0m : $current_apprelease"
    fi
}

# router for chart reate sub-command
function routerChartCreate {
    local chart_name=$1
    local chart_template=$2
    local template_name=_sample_
    local template_dir=$PROJECT_CHARTPATH/$chart_template
    local chart_dir=$PROJECT_CHARTPATH/$chart_name
    if [[ -r $chart_dir ]]; then
        echo -e "\e[32mCreate\e[0m \e[1m\e[31mERROR\e[0m \e[1m$chart_name\e[0m helm chart \e[1malready exist\e[0m in $PROJECT_CHARTPATH"
        exit
    fi
    if [[ "" != "$chart_template" && -r $template_dir ]]; then
        template_name=$chart_template
    else
        template_dir=$PROJECT_PATH/$SHARED_SAMPLE
    fi
    echo -e "\e[32mCreate\e[0m \e[1m$chart_name\e[0m helm chart from \e[1m$template_name\e[0m"
    cp -R $template_dir $chart_dir &>/dev/null
    sed -i "s/$template_name/$chart_name/g" $(find $chart_dir -type f)
    rm $chart_dir/templates/$SHARED_TEMPLATE_NAME &>/dev/null
    ln -P $PROJECT_PATH/$SHARED_TEMPLATE $chart_dir/templates/$SHARED_TEMPLATE_NAME &>/dev/null
    git add $chart_dir &>/dev/null
    git commit -m "[chart/$chart_name] Create from $template_name" $chart_dir &>/dev/null
}

# router for chart test sub-command
function routerChartTest {
    local chart_name=$1
    local chart_dir=$PROJECT_CHARTPATH/$chart_name
    local test_dir=$chart_dir/templates/tests
    if [[ -r $chart_dir ]]; then
        echo -e "\e[33mTest\e[0m \e[1m$chart_name\e[0m helm chart"
        if [[ ! -r $test_dir ]]; then
            echo -e "\e[33mTest\e[0m \e[1m\e[31mWARN\e[0m \e[1m$chart_name\e[0m helm chart \e[1mdoesn't have a test\e[0m script in $test_dir"
        fi
        echo -e "\e[33mTest\e[0m \e[1mGenerate template\e[0m for chart \e[1m$chart_name\e[0m"
        helm template $chart_name $chart_dir
        echo -e "\e[33mTest\e[0m \e[1mLint\e[0m for chart \e[1m$chart_name\e[0m"
        helm lint $chart_dir
    else
        echo -e "\e[33mTest\e[0m \e[1m\e[31mERROR\e[0m \e[1mCould not find\e[0m (or write) \e[1m$chart_name\e[0m helm chart in $chart_dir"
        routerList
    fi
}

# router for chart package sub-command
function routerChartPackage {
    local chart_name=$1
    local chart_dir=$PROJECT_CHARTPATH/$chart_name
    if [[ -r $chart_dir ]]; then
        echo -e "\e[34mPackage\e[0m \e[1m$chart_name\e[0m helm chart"
        local current_release=$(chartReadVersion $chart_name)
        echo -e "\e[34mPackage\e[0m \e[1m$chart_name\e[0m helm chart version $current_release"
        cd $PROJECT_CHARTPATH
        echo -e "\e[34mPackage\e[0m \e[1m$chart_name commit change\e[0m to git repository"
        git add $chart_name/* &>/dev/null
        git commit -m "[chart/$chart_name] package version $current_release" $chart_name &>/dev/null
        echo -e "\e[34mPackage\e[0m \e[1m$chart_name generate v$current_release package\e[0m into $PROJECT_CHARTPATH"
        helm package $chart_name
        cd - &>/dev/null
    else
        echo -e "\e[34mPackage\e[0m \e[1m\e[31mERROR\e[0m \e[1mCould not find\e[0m \e[1m$chart_name\e[0m helm chart in $chart_dir"
        routerList
    fi
}

# router for chart release sub-command
function routerChartRelease {
    local chart_name=$1
    local auto_feature=$2
    local chart_dir=$PROJECT_CHARTPATH/$chart_name
    local next_description="Improve $chart_name options"
    local next_date="$(date +%Y-%m-%d)"
    if [[ -r $chart_dir ]]; then
        echo -e "\e[35mRelease\e[0m \e[1m$chart_name\e[0m helm chart"
        local current_release=$(chartReadVersion $chart_name)
        local next_release=$(cat $chart_dir/Chart.yaml | yq -r .version  | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
        if [[ "auto" == "$auto_feature" || "-a" == "$auto_feature" ]]; then
            echo -e "\e[35mRelease\e[0m \e[1m$chart_name\e[0m auto-version $next_release"
        else
            echo -en "\e[35mRelease\e[0m \e[1m$chart_name\e[0m Set $chart_name next version [$next_release] : "
            read nextRel
            if [[ "$nextRel" != "" ]]; then
                next_release=$nextRel
            fi
            echo -en "\e[35mRelease\e[0m \e[1m$chart_name\e[0m Set $chart_name release description [$next_description] : "
            read nextDesc
            if [[ "$nextDesc" != "" ]]; then
                next_description="$nextDesc"
            fi
        fi
        echo -e "\e[35mRelease\e[0m Update \e[1m$chart_name\e[0m release number $next_release in $chart_name/Chart.yaml"
        echo "| $next_release   | $next_date | $next_description" >> $chart_dir/README.md
        sed -i "s/$current_release/$next_release/" $chart_dir/Chart.yaml
        git add $chart_dir
        cp $chart_dir/README.md $PROJECT_PATH/docs/charts/${chart_name}.md &>/dev/null
        git add $PROJECT_PATH/docs/packages/${chart_name}.md
        git commit -m "[chart/$chart_name] Upgrade release number, from $current_release to $next_release : $next_description" $chart_dir/Chart.yaml &>/dev/null
        echo -e "\e[35mRelease\e[0m \e[1m$chart_name\e[0m version $next_release"
        routerChartPackage $chart_name
        echo -e "\e[35mRelease\e[0m \e[1mmove $chart_name-$next_release.tgz\e[0m to \e[1m$REPO_PACKAGE_DIR\e[0m"
        mv $PROJECT_CHARTPATH/$chart_name-$next_release.tgz $PROJECT_PATH/$REPO_PACKAGE_DIR/$chart_name-$next_release.tgz
        echo -e "\e[35mRelease\e[0m \e[1m$chart_name record v$next_release package\e[0m into git repository"
        git add $PROJECT_PATH/$REPO_PACKAGE_DIR/$chart_name-$next_release.tgz $PROJECT_PATH/docs/packages/${chart_name}.md &>/dev/null
        git commit -m "[chart/$chart_name] release package for version $next_release" $PROJECT_PATH/$REPO_PACKAGE_DIR &>/dev/null
    else
        echo -e "\e[35mRelease\e[0m \e[1m\e[31mERROR\e[0m \e[1mCould not find\e[0m \e[1m$chart_name\e[0m helm chart in $chart_dir"
        routerList
    fi
}

# router for chart publish sub-command
function routerChartPublish {
    local chart_name=$1
    local chart_dir=$PROJECT_CHARTPATH/$chart_name
    local repo_url="https://$GITHUB_USER.github.io/$GITHUB_REPOSITORY"
    local current_release=$(chartReadVersion $chart_name)
    if [[ -r $chart_dir ]]; then
        echo -e "\e[36mPublish\e[0m \e[1m$chart_name\e[0m helm chart"
        echo -e "\e[36mPublish\e[0m Generate index for $repo_url"
        helm repo index --url $repo_url/packages/ $PROJECT_PATH/docs/packages/
        echo -e "\e[36mPublish\e[0m versionning of index for $repo_url"
        git add $PROJECT_PATH/docs/packages &>/dev/null
        git commit -m "[docs] store chart $chart_name v$current_release package in docs" $PROJECT_PATH/docs/packages &>/dev/null
        git push origin $BRANCH_NAME
    else
        echo -e "\e[36mPublish\e[0m \e[1m\e[31mERROR\e[0m \e[1mCould not find\e[0m \e[1m$chart_name\e[0m helm chart in $chart_dir"
        routerList
    fi
}

# router for chart delete sub-command
function routerChartDelete {
    local chart_name=$1
    local chart_dir=$PROJECT_CHARTPATH/$chart_name
    local remove_repository=$2
    local publish_repository=yes
    if [[ "" != "$chart_name" && -w $chart_dir ]]; then
        echo -e "\e[31mDelete\e[0m \e[1m$chart_name\e[0m helm chart"
        if [[ "--with-repository" == "$remove_repository" || "-r" == "$remove_repository" ]]; then
            echo -e "\e[35mRelease\e[0m \e[1m$chart_name\e[0m with repository delete"
            remove_repository=yes
        else
            echo -en "\e[35mRelease\e[0m \e[1m$chart_name\e[0m With repository delete [y/N] : "
            read delRep
            if [[ "$delRep" == "y"  || "$delRep" == "Y" ]]; then
                remove_repository=yes
            fi
        fi

        if [[ "$remove_repository" == "yes" ]]; then
            echo -en "\e[35mRelease\e[0m \e[1m$chart_name\e[0m Publish change to repository  [Y/n] : "
            read delRep
            if [[ "$delRep" == "n"  || "$delRep" == "N" ]]; then
                publish_repository=no
            fi
        fi
        rm -f $PROJECT_PATH/docs/charts/${chart_name}.md &>/dev/null
        git add $kustomize_dir $PROJECT_PATH/docs/charts/${chart_name}.md &>/dev/null
        rm -rf $chart_dir &>/dev/null
        git add $chart_dir &>/dev/null
        git commit -m "[chart/$chart_name] deleted chart $chart_name" $chart_dir $PROJECT_PATH &>/dev/null
        if [[ "$remove_repository" == "yes" ]]; then
            rm -rf $PROJECT_PATH/docs/packages/$chart_name-*.tgz &>/dev/null
            git add $PROJECT_PATH/docs/packages/$chart_name-*.tgz &>/dev/null
            git commit -m "[chart/$chart_name] deleted chart $chart_name packages into repository" $PROJECT_PATH &>/dev/null
            if [[ "$publish_repository" == "yes" ]]; then
                routerPublish
            fi
        fi
    else
        echo -e "\e[1m\e[31mERROR\e[0m \e[1mCould not find\e[0m (or write) \e[1m$chart_name\e[0m helm chart in $chart_dir"
        routerList
    fi
}

# menu switch for usage command
function menuUsage {
    menuHeadArt
cat <<EOF

This client helps you develop, test, package and publish a bunch of helm-charts 
hosted into the same helm repository.

Usage:
  ./sx-helm <action> [flags]

- Actions  :
  - list                           list all helm-chart managed
  - publish                        Publish all change into repository
  - release                        Publish all change into repository and tag this release
  - version                        Get version of this tools
  - <chart-name>                   Use chart-named sub-command (see ./sx-helm chart-name help)

- Examples  :
  ./sx-helm list                   list all helm-chart managed
  ./sx-helm publish                Publish all change into repository
  ./sx-helm version                Get version of this tools
  ./sx-helm <chart-name> info      Get info on a managed helm-chart (see ./sx-helm chart-name help for more commands)

EOF
}

# menu switch for usage of chart sub-command
function menuUsageChart {
    menuHeadArt
cat <<EOF

This client helps you develop, test, package and publish an helm-chart.

Usage:
  ./sx-helm <chart-name> <action> [flags]

- Actions  :
  - create                         Create an new helm chart
  - info                           Get information about a given helm-chart
  - test                           Test an helm chart
  - package                        Package an helm chart
  - release                        Release an helm chart
  - publish                        Publish an helm chart into repository
  - delete                         Delete an helm chart

- Examples  :
  ./sx-helm my-example create      Create an new helm chart named my-example
  ./sx-helm my-example info        Read info about helm chart named my-example
  ./sx-helm my-example test        Test my-example chart
  ./sx-helm my-example package     Package my-example chart
  ./sx-helm my-example release     Release my-example chart
  ./sx-helm my-example publish     Publish an helm chart into repository
  ./sx-helm my-example delete      Delete my-example chart

EOF
}

# menu display AsciiArt
function menuHeadArt {
cat $PROJECT_LIBPATH/header.txt
}
