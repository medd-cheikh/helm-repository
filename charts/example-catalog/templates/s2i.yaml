{{- if .Values.demo }}{{- if .Values.demo.s2i }}{{- if .Values.demo.s2i.enabled -}}
{{- $root := . -}}
{{- with .Values.demo.s2i -}}
{{- $namespace := .namespace | default "demo-s2i" -}}
{{- $scope := .scope | default $root.Values.context.scope -}}
{{- $cluster := .cluster | default $root.Values.context.cluster -}}
{{- $env := .environment | default $root.Values.context.environment -}}
{{- $component := .component | default $root.Values.context.component -}}
{{- $version := .version | default $root.Values.context.version -}}
{{- $randrun := printf "%s%s" "a" (randAlphaNum 8 | lower | nospace) -}}

---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: "app"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-imagestream"
spec:
  tags:
    - name: v1
      annotations:
        openshift.io/display-name: "{{- $scope -}} - {{- $component -}} application"
        description: Application {{- $component -}} image for {{- $scope -}} scope
        iconClass: icon-nodejs
        tags: startx,nodejs,httpd
        supports: http
        version: "{{- $env -}}"
        sampleRepo: "https://github.com/startxfr/sxapi-example.git"
    - name: v2
      annotations:
        openshift.io/display-name: "{{- $scope -}} - {{- $component -}} application"
        description: Application {{- $component -}} image for {{- $scope -}} scope
        iconClass: icon-nodejs
        tags: startx,nodejs,httpd
        supports: http
        version: "{{- $env -}}"
        sampleRepo: "https://github.com/startxfr/sxapi-example.git"
    - name: v3
      annotations:
        openshift.io/display-name: "{{- $scope -}} - {{- $component -}} application"
        description: Application {{- $component -}} image for {{- $scope -}} scope
        iconClass: icon-nodejs
        tags: startx,nodejs,httpd
        supports: http
        version: "{{- $env -}}"
        sampleRepo: "https://github.com/startxfr/sxapi-example.git"
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: "builder"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "builder-imagestream"
spec:
  tags:
    - name: latest
      annotations:
        openshift.io/display-name: "{{- $scope -}} - {{- $component -}} application"
        description: Application {{- $component -}} image for {{- $scope -}} scope
        iconClass: icon-nodejs
        tags: startx,nodejs,httpd
        supports: http
        version: "{{- $env -}}"
        sampleRepo: https://github.com/startxfr/sxapi-core.git
      from:
        kind: DockerImage
        name: startx/sxapi:latest
    - name: "dev"
      annotations:
        openshift.io/display-name: "{{- $scope -}} - {{- $component -}} application"
        description: Application {{- $component -}} image for {{- $scope -}} scope
        iconClass: icon-nodejs
        tags: startx,nodejs,httpd
        supports: http
        version: "{{- $env -}}"
        sampleRepo: https://github.com/startxfr/sxapi-core.git
      from:
        kind: DockerImage
        name: startx/sxapi:testing
    - name: "v0.3.63"
      annotations:
        openshift.io/display-name: "{{- $scope -}} - {{- $component -}} application"
        description: Application {{- $component -}} image for {{- $scope -}} scope
        iconClass: icon-nodejs
        tags: startx,nodejs,httpd
        supports: http
        version: "{{- $env -}}"
        sampleRepo: https://github.com/startxfr/sxapi-core.git
      from:
        kind: DockerImage
        name: startx/sxapi:0.3.63
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "app-v1-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-id: "{.data['SX_ID']}"
    template.openshift.io/expose-type: "{.data['SX_TYPE']}"
    template.openshift.io/expose-service: "{.data['SX_COMPONENT']}"
    template.openshift.io/expose-name: "{.data['SX_NAME']}"
    template.openshift.io/expose-summary: "{.data['SX_SUMMARY']}"
    template.openshift.io/expose-version: "{.data['SX_VERSION']}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v1-config-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Startx {{- $component -}} application
  SX_SUMMARY: Startx {{- $component -}} application based on apache container
  SX_VERSION: "1.0.0"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "app-v2-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-id: "{.data['SX_ID']}"
    template.openshift.io/expose-type: "{.data['SX_TYPE']}"
    template.openshift.io/expose-service: "{.data['SX_COMPONENT']}"
    template.openshift.io/expose-name: "{.data['SX_NAME']}"
    template.openshift.io/expose-summary: "{.data['SX_SUMMARY']}"
    template.openshift.io/expose-version: "{.data['SX_VERSION']}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v2-config-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Startx {{- $component -}} application
  SX_SUMMARY: Startx {{- $component -}} application based on apache container
  SX_VERSION: "2.0.0"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: "app-v1"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v1-buildconfig"
spec:
  triggers:
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
    - type: Generic
      generic:
        secret: secret123
        allowEnv: true
  runPolicy: SerialLatestOnly
  source:
    type: Git
    git:
      uri: https://github.com/startxfr/sxapi-example.git
      ref: "v1"
  resources:
    limits:
      cpu: 400m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  strategy:
    type: Source
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: builder:v0.3.63
      env:
        - name: SX_VERBOSE
          value: "true"
        - name: SX_DEBUG
          value: "true"
  output:
    to:
      kind: ImageStreamTag
      name: app:v1
---
kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: "app-v2"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v2-buildconfig"
spec:
  triggers:
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
    - type: Generic
      generic:
        secret: secret123
        allowEnv: true
  runPolicy: SerialLatestOnly
  source:
    type: Git
    git:
      uri: https://github.com/startxfr/sxapi-example.git
      ref: "v2"
  resources:
    limits:
      cpu: 400m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  strategy:
    type: Source
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: builder:latest
      env:
        - name: SX_VERBOSE
          value: "true"
        - name: SX_DEBUG
          value: "true"
  output:
    to:
      kind: ImageStreamTag
      name: app:v2
---
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: "app-v1"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    version: "1.0.0"
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "app-v1-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  strategy:
    type: Rolling
    rollingParams:
      timeoutSeconds: 60
      maxUnavailable: 25%
      maxSurge: 25%
      post:
        failurePolicy: Ignore
        execNewPod:
          containerName: application-post
          command:
            - "/bin/sx-nodejs info"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          # envFrom:
          #   - configMapRef:
          #       name: app-v1-config
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "application"
        from:
          kind: ImageStreamTag
          name: app:v1
    - type: ConfigChange
  selector:
    app: "s2i"
    version: "1.0.0"
    deploymentconfig: "app-v1"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "true"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app.kubernetes.io/name: "app-v1-deploymentconfig"
        app: "s2i"
        version: "1.0.0"
        deploymentconfig: "app-v1"
    spec:
      containers:
        - name: "application"
          image: " "
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: app-v1-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 20m
              memory: 32Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "app-v1-log"
              mountPath: "/var/log/httpd"
      volumes:
        - name: "app-v1-log"
          emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: "app-v2"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    version: "2.0.0"
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "app-v2-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  strategy:
    type: Rolling
    rollingParams:
      timeoutSeconds: 60
      maxUnavailable: 25%
      maxSurge: 25%
      post:
        failurePolicy: Ignore
        execNewPod:
          containerName: application-post
          command:
            - "/bin/sx-nodejs info"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          # envFrom:
          #   - configMapRef:
          #       name: app-v2-config
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "application"
        from:
          kind: ImageStreamTag
          name: app:v2
    - type: ConfigChange
  selector:
    app: "s2i"
    version: "2.0.0"
    deploymentconfig: "app-v2"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "true"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app.kubernetes.io/name: "app-v2-deploymentconfig"
        app: "s2i"
        version: "2.0.0"
        deploymentconfig: "app-v2"
    spec:
      containers:
        - name: "application"
          image: " "
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: app-v2-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 20m
              memory: 32Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "app-v2-log"
              mountPath: "/var/log/httpd"
      volumes:
        - name: "app-v2-log"
          emptyDir:
            medium: ""
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "app-v1"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v1-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "s2i"
    version: "1.0.0"
    deploymentconfig: "app-v1"
  type: ClusterIP
  sessionAffinity: None
---
kind: Service
apiVersion: v1
metadata:
  name: "app-v2"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v2-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "s2i"
    version: "2.0.0"
    deploymentconfig: "app-v2"
  type: ClusterIP
  sessionAffinity: None
---
kind: ServiceMeshMember
apiVersion: maistra.io/v1
metadata:
  name: default
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "default-servicemeshmember"
spec:
  controlPlaneRef:
    name: basic-install
    namespace: "startx-istio"
---
kind: Gateway
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: "{{- $namespace -}}-gateway"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "{{- $namespace -}}-gateway"
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "{{- $namespace -}}.apps.{{- $cluster -}}.startx.fr"
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "{{- $namespace -}}-public"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "{{- $namespace -}}-public-route"
spec:
  host: "{{- $namespace -}}.apps.{{- $cluster -}}.startx.fr"
  to:
    kind: Service
    name: istio-ingressgateway
    weight: 100
  port:
    targetPort: 8080
  wildcardPolicy: None
---
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: "s2i"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "{{- $scope -}}-{{- $env -}}-istio-bookinfo-virtualservice"
spec:
  hosts:
    - "*"
  gateways:
    - "{{- $namespace -}}-gateway"
  http:
    - name: root
      timeout: 5s
      match:
        - uri:
            exact: /
      route:
        - weight: 50
          destination:
            host: "app-v2"
            subset: v2
            port:
              number: 8080
        - weight: 50
          destination:
            host: "app-v1"
            subset: v1
            port:
              number: 8080
    - name: v1
      match:
        - uri:
            prefix: /v1
      rewrite:
        uri: "/"
      route:
        - destination:
            host: "app-v1"
            subset: v1
            port:
              number: 8080
    - name: v2
      match:
        - uri:
            prefix: /v2
      rewrite:
        uri: "/"
      route:
        - destination:
            host: "app-v2"
            subset: v2
            port:
              number: 8080
---
kind: DestinationRule
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: "app-v1"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v1-destinationrule"
spec:
  host: app-v1
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  subsets:
    - name: v1
      labels:
        app: "s2i"
        version: "1.0.0"
        deploymentconfig: "app-v1"
---
kind: DestinationRule
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: "app-v2"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "s2i"
    app.kubernetes.io/name: "app-v2-destinationrule"
spec:
  host: app-v2
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  subsets:
    - name: v2
      labels:
        app: "s2i"
        version: "2.0.0"
        deploymentconfig: "app-v2"

{{- end }}
{{- end }}{{- end }}{{- end }}
