{{- if .Values.demo }}{{- if .Values.demo.affinity }}{{- if .Values.demo.affinity.enabled -}}
{{- $root := . -}}
{{- with .Values.demo.affinity -}}
{{- $namespace := .namespace | default "demo-affinity" -}}
{{- $scope := .scope | default $root.Values.context.scope -}}
{{- $cluster := .cluster | default $root.Values.context.cluster -}}
{{- $env := .environment | default $root.Values.context.environment -}}
{{- $component := .component | default $root.Values.context.component -}}
{{- $version := .version | default $root.Values.context.version -}}
{{- $randrun := printf "%s%s" "a" (randAlphaNum 8 | lower | nospace) -}}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "node-anti-affinity-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "node-affinity"
    app.kubernetes.io/name: "node-anti-affinity-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Anti-Affinity demo application
  SX_SUMMARY: Anti-Affinity demo application with node-anti-affinity rule defined on node
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "node-affinity-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "node-affinity"
    app.kubernetes.io/name: "node-affinity-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Affinity demo application
  SX_SUMMARY: Affinity demo application with node-affinity rule defined on node
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "pod-anti-affinity-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "node-affinity"
    app.kubernetes.io/name: "pod-anti-affinity-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Anti-Affinity demo application
  SX_SUMMARY: Anti-Affinity demo application with pod-anti-affinity rule defined on pod
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "pod-affinity-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "node-affinity"
    app.kubernetes.io/name: "pod-affinity-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Affinity demo application
  SX_SUMMARY: Affinity demo application with pod-affinity rule defined on pod
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "apps-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "node-affinity"
    app.kubernetes.io/name: "apps-config-configmap"
data:
  sxapi-node-anti-affinity.yml: |-
    name: node-anti-affinity-example
    description: Node Anti-Affinity demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Node Anti-Affinity</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Node Anti-Affinity demo</h1>
            <div class="alert alert-success" role="alert"><p>This pod run on a node with <b>node-role.kubernetes.io/worker</b> role 
            and <b>failure-domain.beta.kubernetes.io/zone</b> not in <b>a zone</b></p></div>
            <div class="alert alert-info" role="alert"><p>This demo is about Node Anti-Affinity
            and the node choosen to run this container must be <b>a worker node <u>not</u> located in a zone</b></p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
  sxapi-node-affinity.yml: |-
    name: node-affinity-example
    description: Node Affinity demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Node Affinity</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Node Affinity demo</h1>
            <div class="alert alert-success" role="alert"><p>This pod run on a node with <b>node-role.kubernetes.io/worker</b> role 
            and <b>failure-domain.beta.kubernetes.io/zone</b> in <b>a zone</b></p></div>
            <div class="alert alert-info" role="alert"><p>This demo is about Node Affinity
            and the node choosen to run this container must be <b>a worker node located in a zone</b></p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
  sxapi-pod-anti-affinity.yml: |-
    name: pod-anti-affinity-example
    description: Pod Anti-Affinity demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Pod Anti-Affinity</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Pod Anti-Affinity demo</h1>
            <div class="alert alert-success" role="alert"><p>All pod in this deployment will run on differents nodes</p></div>
            <div class="alert alert-info" role="alert"><p>This demo is about Pod Anti-Affinity
            and differents nodes will run each containers</p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
  sxapi-pod-affinity.yml: |-
    name: pod-affinity-example
    description: Pod Affinity demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Pod Affinity</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Pod Affinity demo</h1>
            <div class="alert alert-success" role="alert"><p>All pod in this deployment will run on the same node</p></div>
            <div class="alert alert-info" role="alert"><p>This demo is about Pod Affinity
            and the same node will run all theses containers</p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "node-anti-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: node-anti-affinity
    app.kubernetes.io/name: "node-anti-affinity-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "node-anti-affinity"
      deploymentconfig: "node-anti-affinity"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "node-anti-affinity"
        app.kubernetes.io/name: "node-anti-affinity-deploymentconfig"
        deploymentconfig: "node-anti-affinity"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: failure-domain.beta.kubernetes.io/zone
                operator: NotIn
                values:
                - eu-west-1a
                - eu-west-3a
                - eu-west-3a
                - eu-east-1a
                - us-east-1a
                - us-west-1a
              - key: node-role.kubernetes.io/worker
                operator: Exists
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: node-anti-affinity-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "node-anti-affinity-log"
              mountPath: "/var/log/httpd"
            - name: node-anti-affinity-conf
              mountPath: "/conf"
      volumes:
        - name: "node-anti-affinity-log"
          emptyDir:
            medium: ""
        - name: node-anti-affinity-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-node-anti-affinity.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "node-anti-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: node-anti-affinity
    app.kubernetes.io/name: "node-anti-affinity-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "node-anti-affinity"
    deploymentconfig: "node-anti-affinity"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "node-anti-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: node-anti-affinity
    app.kubernetes.io/name: "node-anti-affinity-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "node-anti-affinity"
    weight: 100
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "node-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: node-affinity
    app.kubernetes.io/name: "node-affinity-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "node-affinity"
      deploymentconfig: "node-affinity"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "node-affinity"
        app.kubernetes.io/name: "node-affinity-deploymentconfig"
        deploymentconfig: "node-affinity"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: failure-domain.beta.kubernetes.io/zone
                operator: In
                values:
                - eu-west-1a
                - eu-west-3a
                - eu-west-3a
                - eu-east-1a
                - us-east-1a
                - us-west-1a
              - key: node-role.kubernetes.io/worker
                operator: Exists
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: node-affinity-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "node-affinity-log"
              mountPath: "/var/log/httpd"
            - name: node-affinity-conf
              mountPath: "/conf"
      volumes:
        - name: "node-affinity-log"
          emptyDir:
            medium: ""
        - name: node-affinity-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-node-affinity.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "node-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: node-affinity
    app.kubernetes.io/name: "node-affinity-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "node-affinity"
    deploymentconfig: "node-affinity"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "node-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: node-affinity
    app.kubernetes.io/name: "node-affinity-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "node-affinity"
    weight: 100
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "pod-anti-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: pod-anti-affinity
    app.kubernetes.io/name: "pod-anti-affinity-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "pod-anti-affinity"
      deploymentconfig: "pod-anti-affinity"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "pod-anti-affinity"
        app.kubernetes.io/name: "pod-anti-affinity-deploymentconfig"
        deploymentconfig: "pod-anti-affinity"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pod-anti-affinity
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: pod-anti-affinity-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "pod-anti-affinity-log"
              mountPath: "/var/log/httpd"
            - name: pod-anti-affinity-conf
              mountPath: "/conf"
      volumes:
        - name: "pod-anti-affinity-log"
          emptyDir:
            medium: ""
        - name: pod-anti-affinity-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-pod-anti-affinity.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "pod-anti-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: pod-anti-affinity
    app.kubernetes.io/name: "pod-anti-affinity-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "pod-anti-affinity"
    deploymentconfig: "pod-anti-affinity"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "pod-anti-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: pod-anti-affinity
    app.kubernetes.io/name: "pod-anti-affinity-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "pod-anti-affinity"
    weight: 100
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "pod-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: pod-affinity
    app.kubernetes.io/name: "pod-affinity-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "pod-affinity"
      deploymentconfig: "pod-affinity"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "pod-affinity"
        app.kubernetes.io/name: "pod-affinity-deploymentconfig"
        deploymentconfig: "pod-affinity"
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pod-affinity
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: pod-affinity-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "pod-affinity-log"
              mountPath: "/var/log/httpd"
            - name: pod-affinity-conf
              mountPath: "/conf"
      volumes:
        - name: "pod-affinity-log"
          emptyDir:
            medium: ""
        - name: pod-affinity-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-pod-affinity.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "pod-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: pod-affinity
    app.kubernetes.io/name: "pod-affinity-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "pod-affinity"
    deploymentconfig: "pod-affinity"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "pod-affinity"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: pod-affinity
    app.kubernetes.io/name: "pod-affinity-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "pod-affinity"
    weight: 100
{{- end }}
{{- end }}{{- end }}{{- end }}
