{{- if .Values.demo }}{{- if .Values.demo.priority }}{{- if .Values.demo.priority.enabled -}}
{{- $root := . -}}
{{- with .Values.demo.priority -}}
{{- $namespace := .namespace | default "demo-priority" -}}
{{- $scope := .scope | default $root.Values.context.scope -}}
{{- $cluster := .cluster | default $root.Values.context.cluster -}}
{{- $env := .environment | default $root.Values.context.environment -}}
{{- $component := .component | default $root.Values.context.component -}}
{{- $version := .version | default $root.Values.context.version -}}
{{- $randrun := printf "%s%s" "a" (randAlphaNum 8 | lower | nospace) -}}

---
kind: PriorityClass
apiVersion: scheduling.k8s.io/v1
metadata:
  name: veryhigh-priority
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "high-priority-priorityclass"
value: 1000000000
description: >-
  This priority class should be used for very high priority applications.
  Will have more priority than openshift common pod and will be closed to
  the system-cluster-critical pod priority
preemptionPolicy: PreemptLowerPriority
---
kind: PriorityClass
apiVersion: scheduling.k8s.io/v1
metadata:
  name: high-priority
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "high-priority-priorityclass"
value: 500000000
description: >-
  This priority class should be used for high priority applications
preemptionPolicy: PreemptLowerPriority
---
kind: PriorityClass
apiVersion: scheduling.k8s.io/v1
metadata:
  name: low-priority
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "low-priority-priorityclass"
value: 10000
description: >-
  This priority class should be used for low priority applications
preemptionPolicy: PreemptLowerPriority
---
kind: PriorityClass
apiVersion: scheduling.k8s.io/v1
metadata:
  name: verylow-priority
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "verylow-priority-priorityclass"
value: -10000
description: >-
  This priority class should be used for non-critical workload. The negative
  value enable the Cluster Autoscaler does not add more nodes to your cluster 
  when the non-critical pods are pending. 
  Therefore, you wonâ€™t incur higher expenses. 
  When your critical workload requires more computing resources, the scheduler 
  preempts non-critical pods and schedules critical ones.
preemptionPolicy: PreemptLowerPriority
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "veryhigh-priority-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "veryhigh-priority"
    app.kubernetes.io/name: "veryhigh-priority-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Very High Priority demo application
  SX_SUMMARY: Very High Priority demo application with veryhigh-priority in pod scheduling
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "high-priority-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "high-priority"
    app.kubernetes.io/name: "high-priority-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: High Priority demo application
  SX_SUMMARY: High Priority demo application with high-priority in pod scheduling
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "low-priority-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "low-priority"
    app.kubernetes.io/name: "low-priority-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Low Priority demo application
  SX_SUMMARY: Low Priority demo application with low-priority in pod scheduling
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "verylow-priority-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "verylow-priority"
    app.kubernetes.io/name: "verylow-priority-configmap"
data:
  SX_ID: "{{- $scope -}}-{{- $component -}}-{{- $env -}}/app"
  SX_TYPE: app
  SX_COMPONENT: "{{- $component -}}"
  SX_NAME: Very Low Priority demo application
  SX_SUMMARY: Very Low Priority demo application with verylow-priority in pod scheduling
  SX_VERSION: "{{- $env -}}"
  SX_VERBOSE: "true"
  SX_DEBUG: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "apps-config"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: "high-priority"
    app.kubernetes.io/name: "apps-config-configmap"
data:
  sxapi-veryhigh-priority.yml: |-
    name: veryhigh-priority-example
    description: Pod Very High Priority demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Pod Very High Priority</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Pod Very High Priority demo</h1>
            <div class="alert alert-success" role="alert"><p>All pod in this deployment will be scheduled with the higher priority (close to the openshift system priority)</p></div>
            <div class="alert alert-info" role="alert"><p>This demo deploy pod using the <b>veryhigh-priority PriorityClass</b>
            and you can observe the effect when deploying multiples pods (like in this demo) with various priority class. If you are running this demo under 
            a cluster with ClusterAutoscaler enabled and under presure, podPriority will show how critical workload will be running and Non critical workload will wait for node
            provisionning to be executed.</p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
  sxapi-high-priority.yml: |-
    name: high-priority-example
    description: Pod High Priority demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Pod High Priority</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Pod High Priority demo</h1>
            <div class="alert alert-success" role="alert"><p>All pod in this deployment will be scheduled with high priority (just bellow openshift resource priority)</p></div>
            <div class="alert alert-info" role="alert"><p>This demo deploy pod using the <b>high-priority PriorityClass</b>
            and you can observe the effect when deploying multiples pods (like in this demo) with various priority class. If you are running this demo under 
            a cluster with ClusterAutoscaler enabled and under presure, podPriority will show how critical workload will be running and Non critical workload will wait for node
            provisionning to be executed.</p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
  sxapi-low-priority.yml: |-
    name: low-priority-example
    description: Pod Low Priority demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Pod Low Priority</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Pod Low Priority demo</h1>
            <div class="alert alert-success" role="alert"><p>All pod in this deployment will be scheduled with low priority (just above the default 0 priority)</p></div>
            <div class="alert alert-info" role="alert"><p>This demo deploy pod using the <b>low-priority PriorityClass</b>
            and you can observe the effect when deploying multiples pods (like in this demo) with various priority class. If you are running this demo under 
            a cluster with ClusterAutoscaler enabled and under presure, podPriority will show how critical workload will be running and Non critical workload will wait for node
            provisionning to be executed.</p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
  sxapi-verylow-priority.yml: |-
    name: verylow-priority-example
    description: Pod Very Low Priority demo application
    version: "1.0.0"
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display homepage
        body: |-
            <html>
            <head><title>Application Pod Very Low Priority</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Pod Very Low Priority demo</h1>
            <div class="alert alert-success" role="alert"><p>All pod in this deployment will be scheduled with very-low priority (just below the default 0 priority)</p></div>
            <div class="alert alert-info" role="alert"><p>This demo deploy pod using the <b>verylow-priority PriorityClass</b>
            and you can observe the effect when deploying multiples pods (like in this demo) with various priority class. If you are running this demo under 
            a cluster with ClusterAutoscaler enabled and under presure, podPriority will show how critical workload will be running and Non critical workload will wait for node
            provisionning to be executed.</p></div>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>\{\{package.name\}\} v\{\{package.version\}\}</b>. \{\{package.description\}\}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "high-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: high-priority
    app.kubernetes.io/name: "high-priority-deploymentconfig"
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "high-priority"
      deploymentconfig: "high-priority"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "high-priority"
        app.kubernetes.io/name: "high-priority-deploymentconfig"
        kube-monkey/enabled: enabled
        kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
        deploymentconfig: "high-priority"
    spec:
      priorityClassName: high-priority
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: high-priority-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "high-priority-log"
              mountPath: "/var/log/httpd"
            - name: high-priority-conf
              mountPath: "/conf"
      volumes:
        - name: "high-priority-log"
          emptyDir:
            medium: ""
        - name: high-priority-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-high-priority.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "high-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: high-priority
    app.kubernetes.io/name: "high-priority-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "high-priority"
    deploymentconfig: "high-priority"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "high-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: high-priority
    app.kubernetes.io/name: "high-priority-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "high-priority"
    weight: 100
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "veryhigh-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: veryhigh-priority
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "veryhigh-priority-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "veryhigh-priority"
      deploymentconfig: "veryhigh-priority"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "veryhigh-priority"
        app.kubernetes.io/name: "veryhigh-priority-deploymentconfig"
        deploymentconfig: "veryhigh-priority"
    spec:
      priorityClassName: veryhigh-priority
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: veryhigh-priority-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "veryhigh-priority-log"
              mountPath: "/var/log/httpd"
            - name: veryhigh-priority-conf
              mountPath: "/conf"
      volumes:
        - name: "veryhigh-priority-log"
          emptyDir:
            medium: ""
        - name: veryhigh-priority-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-veryhigh-priority.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "veryhigh-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: veryhigh-priority
    app.kubernetes.io/name: "veryhigh-priority-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "veryhigh-priority"
    deploymentconfig: "veryhigh-priority"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "veryhigh-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: veryhigh-priority
    app.kubernetes.io/name: "veryhigh-priority-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "veryhigh-priority"
    weight: 100
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "verylow-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: verylow-priority
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "verylow-priority-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "verylow-priority"
      deploymentconfig: "verylow-priority"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "verylow-priority"
        app.kubernetes.io/name: "verylow-priority-deploymentconfig"
        deploymentconfig: "verylow-priority"
    spec:
      priorityClassName: verylow-priority
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: verylow-priority-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "verylow-priority-log"
              mountPath: "/var/log/httpd"
            - name: verylow-priority-conf
              mountPath: "/conf"
      volumes:
        - name: "verylow-priority-log"
          emptyDir:
            medium: ""
        - name: verylow-priority-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-verylow-priority.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "verylow-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: verylow-priority
    app.kubernetes.io/name: "verylow-priority-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "verylow-priority"
    deploymentconfig: "verylow-priority"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "verylow-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: verylow-priority
    app.kubernetes.io/name: "verylow-priority-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "verylow-priority"
    weight: 100
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "low-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: low-priority
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "low-priority-deploymentconfig"
    app.openshift.io/runtime: nodejs
spec:
  replicas: 2
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: "low-priority"
      deploymentconfig: "low-priority"
  template:
    metadata:
      annotations:
        {{- include "example-catalog.annotations" $root | nindent 8 }}
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "example-catalog.labels" $root | nindent 8 }}
        app: "low-priority"
        app.kubernetes.io/name: "low-priority-deploymentconfig"
        deploymentconfig: "low-priority"
    spec:
      priorityClassName: low-priority
      containers:
        - name: "application"
          image: "quay.io/startx/sxapi:testing"
          env:
            - name: SX_VERBOSE
              value: "true"
            - name: SX_DEBUG
              value: "true"
          envFrom:
            - configMapRef:
                name: low-priority-config
          command:
            - "/bin/sx-nodejs"
          args:
            - run
          ports:
            - containerPort: 8077
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isLive
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - "/bin/sx-nodejs"
                - isReady
            initialDelaySeconds: 4
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          volumeMounts:
            - name: "low-priority-log"
              mountPath: "/var/log/httpd"
            - name: low-priority-conf
              mountPath: "/conf"
      volumes:
        - name: "low-priority-log"
          emptyDir:
            medium: ""
        - name: low-priority-conf
          configMap:
            name: "apps-config"
            items:
            - key: sxapi-low-priority.yml
              path: sxapi.yml
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "low-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    template.openshift.io/expose-service_ip: "{.spec.clusterIP}"
    template.openshift.io/expose-service_port: "{.spec.ports[0].port}"
    template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[0].port}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: low-priority
    app.kubernetes.io/name: "low-priority-service"
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8077
  selector:
    app: "low-priority"
    deploymentconfig: "low-priority"
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: "low-priority"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: "true"
    template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: low-priority
    app.kubernetes.io/name: "low-priority-route"
spec:
  tls:
    insecureEdgeTerminationPolicy: Allow
    termination: edge
  wildcardPolicy: None
  to:
    kind: Service
    name: "low-priority"
    weight: 100
{{- end }}
{{- end }}{{- end }}{{- end }}
