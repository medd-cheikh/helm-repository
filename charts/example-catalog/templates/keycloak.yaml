{{- if .Values.demo }}{{- if .Values.demo.keycloak }}{{- if .Values.demo.keycloak.enabled -}}
{{- $root := . -}}
{{- with .Values.demo.keycloak -}}
{{- $namespace := .namespace | default "demo-keycloak" -}}
{{- $realm := .realm | default "demo-realm" -}}
{{- $scope := .scope | default $root.Values.context.scope -}}
{{- $cluster := .cluster | default $root.Values.context.cluster -}}
{{- $env := .environment | default $root.Values.context.environment -}}
{{- $component := .component | default $root.Values.context.component -}}
{{- $version := .version | default $root.Values.context.version -}}
{{- $randrun := printf "%s%s" "a" (randAlphaNum 8 | lower | nospace) -}}

---
kind: KeycloakRealm
apiVersion: keycloak.org/v1alpha1
metadata:
  name: "{{- $realm -}}"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-{{- $realm -}}-keycloakrealm"
spec:
  instanceSelector:
    matchLabels:
      app: startx-keycloak
  realm:
    displayName: Demo Realm
    enabled: true
    id: "{{- $scope -}}"
    realm: "{{- $scope -}}"
    eventsListeners:
      - "metrics-listener"
    users:
      - username: "admin"
        firstName: "User"
        lastName: "ADMIN"
        email: "cl+admin@startx.fr"
        enabled: True
        emailVerified: True
        credentials:
          - type: "password"
            value: "secretdemerde"
        realmRoles:
          - "offline_access"
          - "uma_authorization"
        clientRoles:
          account:
            - "manage-account"
            - "view-profile"
          realm-management:
            - "manage-users"
            - "view-users"
            - "query-users"
            - "create-client"
  realmOverrides:
    - forFlow: "browser"
      identityProvider: "openshift-v4"
---
kind: KeycloakClient
apiVersion: keycloak.org/v1alpha1
metadata:
  name: "{{- $scope -}}-app1"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-{{- $scope -}}-app1-keycloakclient"
spec:
  client:
    id: "{{- $namespace -}}-client-app1"
    clientId: "{{- $scope -}}-app1"
    secret: "{{- $scope -}}app1secret123"
    directAccessGrantsEnabled: false
    clientAuthenticatorType: client-app1
    protocol: openid-connect
  realmSelector:
    matchLabels:
      app: "{{- $namespace -}}"
---
kind: KeycloakUser
apiVersion: keycloak.org/v1alpha1
metadata:
  name: "{{- $scope -}}-user"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-{{- $scope -}}-user-keycloakuser"
spec:
  realmSelector:
    matchLabels:
      app: "{{- $namespace -}}"
  user:
    username: "{{- $scope -}}_user"
    email: cl+{{- $scope -}}@startx.fr
    firstName: Demo
    lastName: USER
    enabled: true
    emailVerified: true
    credentials:
      - type: "password"
        value: "{{- $scope -}}_user"
---
kind: KeycloakUser
apiVersion: keycloak.org/v1alpha1
metadata:
  name: "{{- $scope -}}-admin"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-{{- $scope -}}-admin-keycloakuser"
spec:
  realmSelector:
    matchLabels:
      app: "{{- $namespace -}}"
  user:
    username: "{{- $scope -}}_admin"
    email: cl+{{- $scope -}}_admin@startx.fr
    firstName: Demo
    lastName: ADMIN
    enabled: true
    emailVerified: true
    credentials:
      - type: "password"
        value: "{{- $scope -}}_admin"
    realmRoles:
      - "offline_access"
    clientRoles:
      account:
        - "manage-account"
      realm-management:
        - "manage-users"
---
kind: KeycloakBackup
apiVersion: keycloak.org/v1alpha1
metadata:
  name: "{{- $scope -}}-keycloakbackup"
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-{{- $scope -}}-keycloakbackup"
spec:
  instanceSelector:
    matchLabels:
      app: startx-keycloak
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: flask
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/startxfr/demo-sso-flask.git
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: flask
    version: "{{- $version -}}"
    app.kubernetes.io/name: "{{- $namespace -}}-flask-imagestream"
    app.kubernetes.io/instance: flask
    app.kubernetes.io/part-of: flask
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: "3.6"
spec:
  lookupPolicy:
    local: false
---
kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: flask
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"flask:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"flask\")].image"}]'
    alpha.image.policy.openshift.io/resolve-names: '*'
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-flask-buildconfig"
spec:
  failedBuildsHistoryLimit: 5
  successfulBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: flask:latest
  postCommit: {}
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  runPolicy: Serial
  source:
    contextDir: /
    git:
      uri: https://github.com/startxfr/demo-sso-flask.git
    type: Git
  strategy:
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: python:3.6
        namespace: openshift
    type: Source
  triggers:
    - type: Generic
      generic:
        secretReference:
          name: flask-generic-webhook-secret
    - type: GitHub
      github:
        secretReference:
          name: flask-github-webhook-secret
    - type: ImageChange
    - type: ConfigChange
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: flask
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"flask:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"flask\")].image"}]'
    alpha.image.policy.openshift.io/resolve-names: '*'
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "{{- $namespace -}}-flask-deployment"
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: flask
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: flask
        deploymentconfig: flask
    spec:
      containers:
      - name: flask
        image: image-registry.openshift-image-registry.svc:5000/demo-keycloak/flask:latest
        imagePullPolicy: Always
        env:
          - name: APP_ROOT
            value: /opt/app-root/src/src
          - name: HOME
            value: /opt/app-root/src/src
          - name: APP_FILE
            value: /opt/app-root/src/src/app.py
        ports:
          - containerPort: 8080
            protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        workingDir: /opt/app-root/src/src
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  name: flask
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-flask-service"
spec:
  type: ClusterIP
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: flask
    deploymentconfig: flask
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: flask
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    openshift.io/host.generated: "true"
    app.kubernetes.io/name: "{{- $namespace -}}-flask-route"
spec:
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: flask
    weight: 100
  wildcardPolicy: None
# Demo spring-boot application
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: spring-boot
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/moussanaa/rh-sso-spring-boot
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app: spring-boot
    version: "{{- $version -}}"
    app.kubernetes.io/name: "{{- $namespace -}}-spring-boot-imagestream"
    app.kubernetes.io/instance: spring-boot
    app.kubernetes.io/part-of: spring-boot
    app.openshift.io/runtime: java
    app.openshift.io/runtime-version: "11"
spec:
  lookupPolicy:
    local: false
---
kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: spring-boot
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-spring-boot-buildconfig"
spec:
  failedBuildsHistoryLimit: 5
  successfulBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: spring-boot:latest
  postCommit: {}
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  runPolicy: Serial
  source:
    contextDir: /
    git:
      uri: https://github.com/startxfr/demo-sso-spring-boot
    type: Git
  strategy:
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: java:11
        namespace: openshift
    type: Source
  triggers:
  - type: Generic
    generic:
      secretReference:
        name: spring-boot-generic-webhook-secret
  - type: GitHub
    github:
      secretReference:
        name: spring-boot-github-webhook-secret
  - type: ImageChange
  - type: ConfigChange
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: spring-boot
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"spring-boot:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"spring-boot\")].image"}]'
    alpha.image.policy.openshift.io/resolve-names: '*'
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app.kubernetes.io/name: "{{- $namespace -}}-spring-boot-deployment"
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: spring-boot
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: spring-boot
        deploymentconfig: spring-boot
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/demo-keycloak/spring-boot@sha256:4cd42210be9c1952fad57463d75fa0423eb3c790acc978d34a85952addc5655b
        imagePullPolicy: Always
        name: spring-boot
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        - containerPort: 8778
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 400Mi
          requests:
            cpu: 50m
            memory: 256Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  name: spring-boot
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    openshift.io/host.generated: "true"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-spring-boot-service"
spec:
  type: ClusterIP
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: 8443-tcp
    port: 8443
    protocol: TCP
    targetPort: 8443
  - name: 8778-tcp
    port: 8778
    protocol: TCP
    targetPort: 8778
  selector:
    app: spring-boot
    deploymentconfig: spring-boot
  sessionAffinity: None
status:
  loadBalancer: {}
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: spring-boot
  namespace: {{ $namespace | quote }}
  annotations:
    {{- include "example-catalog.annotations" $root | nindent 4 }}
    openshift.io/host.generated: "true"
  labels:
    {{- include "example-catalog.labels" $root | nindent 4 }}
    app.kubernetes.io/name: "{{- $namespace -}}-spring-boot-route"
spec:
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: spring-boot
    weight: 100
  wildcardPolicy: None

{{- end }}
{{- end }}{{- end }}{{- end }}
