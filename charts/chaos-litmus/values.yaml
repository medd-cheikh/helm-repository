

# # Use it to Overwrite the helm-chart name
#nameOverride: chaos-litmus
# # Use it to Overwrite the helm-chart version
#versionOverride: 0.0.1

# Application chaos context
context:  &context
# Name of the global scope for this application (organisational tenant)
 scope: companyname
# Name of the cluster running this application (plateform tenant)
 cluster: clustername
# Name of the environement for this application (ex: dev, factory, preprod or prod)
 environment: dev
# Component name of this application (logical tenant)
 component: chaos
# Application name (functionnal tenant, default use Chart name)
 app: litmus
# Version name of this application (default use Chart appVersion)
 version: "0.0.1"

# Configuration of the project (see https://helm-repository.readthedocs.io/en/latest/charts/project)
project: 
  enabled: false
  context: 
    <<: *context
  project: 
    enabled: true
    type: project
    name: chaos-litmus
    display_name: Chaos - Litmus
    description: Litmus chaos orchestrator in STARTX Chaos test suite

# Configuration of the litmus deployment (see https://litmuschaos.github.io/litmus-helm)
litmus:
  enabled: false
  nameOverride: litmus
  portalScope: cluster
  customLabels: {}
  adminConfig:
    DBUSER: "admin"
    DBPASSWORD: "1234"
    JWTSecret: "litmus-portal@123"
    VERSION: "2.9.0"
    SKIP_SSL_VERIFY: "false"
    # -- leave empty if uses Mongo DB deployed by this chart
    DB_SERVER: ""
    DB_PORT: "27017"
    ADMIN_USERNAME: "admin"
    ADMIN_PASSWORD: "litmus"
  image:
    imageRegistryName: litmuschaos
    imagePullSecrets: []
  ingress:
    enabled: false
    name: litmus-ingress
  upgradeAgent:
    controlPlane:
      image:
        repository: upgrade-agent-cp
        tag: "2.9.0"
        pullPolicy: "Always"
      restartPolicy: OnFailure
    nodeSelector: {}
    tolerations: []
    affinity: {}
  portal:
    frontend:
      replicas: 1
      updateStrategy: {}
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 2000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
      image:
        repository: litmusportal-frontend
        tag: 2.9.0
        pullPolicy: "Always"
      containerPort: 8080
      customLabels: {}
      resources:
        requests:
          memory: "150Mi"
          cpu: "125m"
          ephemeral-storage: "500Mi"
        limits:
          memory: "512Mi"
          cpu: "550m"
          ephemeral-storage: "1Gi"
      livenessProbe:
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      service:
        annotations: {}
        type: NodePort
        port: 9091
        targetPort: 8080
      virtualService:
        enabled: false
        hosts: []
        gateways: []
      nodeSelector: {}
      tolerations: []
      affinity: {}
    server:
      replicas: 1
      updateStrategy: {}
      serviceAccountName: litmus-server-account
      customLabels: {}
      waitForMongodb:
        image:
          repository: curl
          tag: 2.9.0
          pullPolicy: "Always"
        resources:
          requests:
            memory: "150Mi"
            cpu: "25m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
      graphqlServer:
        volumes:
          - name: gitops-storage
            emptyDir: {}
          - name: hub-storage
            emptyDir: {}
        volumeMounts:
          - mountPath: /tmp/gitops
            name: gitops-storage
          - mountPath: /tmp/version
            name: hub-storage
        securityContext:
          runAsUser: 2000
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        image:
          repository: litmusportal-server
          tag: 2.9.0
          pullPolicy: "Always"
        ports:
          - name: gql-server
            containerPort: 8080
          - name: gql-rpc-server
            containerPort: 8000
        imageEnv:
          SUBSCRIBER_IMAGE: "litmusportal-subscriber:2.9.0"
          EVENT_TRACKER_IMAGE: "litmusportal-event-tracker:2.9.0"
          ARGO_WORKFLOW_CONTROLLER_IMAGE: "workflow-controller:v3.2.9"
          ARGO_WORKFLOW_EXECUTOR_IMAGE: "argoexec:v3.2.9"
          LITMUS_CHAOS_OPERATOR_IMAGE: "chaos-operator:2.8.0"
          LITMUS_CHAOS_RUNNER_IMAGE: "chaos-runner:2.8.0"
          LITMUS_CHAOS_EXPORTER_IMAGE: "chaos-exporter:2.8.0"
        genericEnv:
          TLS_SECRET_NAME: ""
          TLS_CERT_64: ""
          SELF_AGENT: "true"
          SELF_AGENT_NODE_SELECTOR: ""
          SELF_AGENT_TOLERATIONS: ""
          CONTAINER_RUNTIME_EXECUTOR: "k8sapi"
          HUB_BRANCH_NAME: "v2.8.x"
          AGENT_DEPLOYMENTS: '["app=chaos-exporter", "name=chaos-operator", "app=event-tracker", "app=workflow-controller"]'
          LITMUS_AUTH_GRPC_PORT: ":3030"
          LITMUS_CORE_VERSION: "2.8.0"
        resources:
          requests:
            memory: "250Mi"
            cpu: "225m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "712Mi"
            cpu: "550m"
            ephemeral-storage: "1Gi"
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      authServer:
        securityContext:
          runAsUser: 2000
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        automountServiceAccountToken: false
        image:
          repository: litmusportal-auth-server
          tag: 2.9.0
          pullPolicy: "Always"
        ports:
          - name: auth-server
            containerPort: 3030
          - name: auth-rpc-server
            containerPort: 3000
        env:
          LITMUS_GQL_GRPC_PORT: ":8000"
        resources:
          requests:
            memory: "250Mi"
            cpu: "225m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "712Mi"
            cpu: "550m"
            ephemeral-storage: "1Gi"
      service:
        annotations: {}
        type: NodePort
        graphqlServer:
          port: 9002
          targetPort: 8080
        graphqlRpcServer:
          port: 8000
          targetPort: 8000
        authServer:
          port: 9003
          targetPort: 3000
        authRpcServer:
          port: 3030
          targetPort: 3030
      nodeSelector: {}
      tolerations: []
      affinity: {}
  mongo:
    replicas: 1
    customLabels: {}
    automountServiceAccountToken: false
    securityContext:
      # runAsUser: 2000
      allowPrivilegeEscalation: false
      # runAsNonRoot: true
    image:
      repository: mongo
      tag: 4.2.8
      pullPolicy: "Always"
    containerPort: 27017
    resources:
      requests:
        memory: "300Mi"
        cpu: "225m"
        ephemeral-storage: "1Gi"
      limits:
        memory: "712Mi"
        cpu: "550m"
        ephemeral-storage: "3Gi"
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    persistence:
      size: 20Gi
      accessMode: ReadWriteOnce
      # storageClass: ""
    service:
      type: ClusterIP
      port: 27017
      targetPort: 27017
    # serviceAccountName: "mongo-service-account"
    nodeSelector: {}
    tolerations: []
    affinity: {}
  openshift:
    route:
      enabled: true
      name: litmus-portal
      annotations: {}
      host: ""
