

# # Use it to Overrride the helm-chart name
#nameOverride: example-chaos
# # Use it to Overrride the helm-chart version
#versionOverride: 0.0.1

# Application chaos context
context:  &context
# Name of the global scope for this application (organisational tenant)
 scope: myscope
# Name of the cluster running this application (plateform tenant)
 cluster: localhost
# Name of the environement for this application (ex: dev, factory, preprod or prod)
 environment: myenv
# Component name of this application (logical tenant)
 component: helm
# Application name (functionnal tenant, default use Chart name)
 app: example-chaos
# Version name of this application (default use Chart appVersion)
 version: "0.0.1"

# Configuration of the project (see https://startxfr.github.io/helm-repository/charts/project)
project: 
  enabled: false
  context: 
    <<: *context
  project: 
    enabled: true
    type: project
    name: example-chaos
    display_name: Chaos - Main
    description: Chaos test suite configured by STARTX

# Configuration of the kraken project (see https://startxfr.github.io/helm-repository/charts/project)
kraken_project: 
  enabled: false
  context: 
    <<: *context
  project: 
    enabled: true
    type: project
    name: example-chaos-kraken
    display_name: Chaos - Kraken
    description: Chaos kraken in test suite configured by STARTX

# Configuration of the kraken deployment (see https://kraken.ci/helm-repo/charts)
kraken: 
  # Unleash the kraken ;)
  enabled: false
  # Enable exposition for this application (route based)
  expose: true
  # Control kraken exposition
  access:
    # Access method
    # possible methods: external-ips, node-port, load-balancer
    # default is node-port
    method: 'load-balancer'
    # # in case of external-ips method set these:
    # external_ips:
    # # in case of node-port method set these:
    # ui_port: 31080
    # clickhouse_port: 31901
    # minio_port: 31999
  # # Kraken image used
  # image:
  #   baseUrl: us-docker.pkg.dev/kraken-261806/kk
  # # Kraken postgresql configuration
  # postgresql:
  #   db: kraken
  #   user: kraken
  #   password: kk123
  # # Minio configuration
  # minio:
  #   access_key: access_key_CHANGEME
  #   secret_key: secret_key_CHANGEME

# Configuration of the mesh project (see https://startxfr.github.io/helm-repository/charts/project)
mesh_project: 
  enabled: false
  context: 
    <<: *context
  project: 
    enabled: true
    type: project
    name: example-chaos-mesh
    display_name: Chaos - Mesh
    description: Chaos mesh in test suite configured by STARTX

# Configuration of the mesh deployment (see https://charts.chaos-mesh.org)
mesh: 
  enabled: false
  expose: true
  chaosDaemon:
    runtime: crio
    socketPath: /var/run/crio/crio.sock
  nameOverride: ""
  fullnameOverride: ""
  customLabels: {}
  clusterScoped: true
  rbac:
    create: true
  timezone: "Europe/Paris"
  enableProfiling: true
  enableCtrlServer: true
  imagePullSecrets: []
  controllerManager: 
    hostNetwork: false
    serviceAccount: chaos-controller-manager
    replicaCount: 3
    env:
      WEBHOOK_PORT: 9443
      METRICS_PORT: 10080
    enableFilterNamespace: false
    service:
      type: ClusterIP
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    chaosdSecurityMode: true
  chaosDaemon:
    grpcPort: 31767
    httpPort: 31766
    env: {}
    hostNetwork: false
    mtls:
      enabled: false
    privileged: true
    podAnnotations: {}
    serviceAccount: chaos-daemon
    podSecurityPolicy: false
    runtime: crio
    socketPath: /var/run/crio/crio.sock
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
  dashboard:
    create: true
    rootUrl: https://ui-startx-chaos-mesh.apps.mycluster.com
    hostNetwork: false
    replicaCount: 1
    serviceAccount: chaos-dashboard
    imagePullPolicy: IfNotPresent
    securityMode: true
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    service:
      annotations: {}
      type: ClusterIP
    resources:
      limits: {}
      requests:
        cpu: 25m
        memory: 256Mi
    persistentVolume:
      enabled: false
    env:
      LISTEN_HOST: 0.0.0.0
      LISTEN_PORT: 2333
      METRIC_HOST: 0.0.0.0
      METRIC_PORT: 2334
      DATABASE_DRIVER: sqlite3
      DATABASE_DATASOURCE: /data/core.sqlite
      CLEAN_SYNC_PERIOD: 12h
      TTL_EVENT: 168h
      TTL_EXPERIMENT: 336h
      TTL_SCHEDULE: 336h
      TTL_WORKFLOW: 336h
    ingress:
      enabled: false
  dnsServer:
    create: true
    serviceAccount: chaos-dns-server
    nodeSelector: {}
    tolerations: []
    podAnnotations: {}
    name: chaos-mesh-dns-server
    grpcPort: 9288
    resources:
      limits: {}
      requests:
        cpu: 100m
        memory: 70Mi
    env:
      LISTEN_HOST: "0.0.0.0"
      LISTEN_PORT: 53
  prometheus:
    create: true
    serviceAccount: prometheus
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 512Mi
    service:
      type: ClusterIP
    volume:
      storage: 2Gi
      storageClassName: gp2
  webhook:
    certManager:
      enabled: false
    timeoutSeconds: 5
    FailurePolicy: Fail
    CRDS:
      - podchaos
      - iochaos
      - timechaos
      - networkchaos
      - kernelchaos
      - stresschaos
      - awschaos
      - azurechaos
      - gcpchaos
      - dnschaos
      - jvmchaos
      - schedule
      - workflow
      - httpchaos
      - physicalmachinechaos
      - physicalmachine
      - statuscheck
  bpfki:
    create: true
    grpcPort: 50051
    resources: {}
  chaosDlv:
    enable: true

# Configuration of the kubemonkey project (see https://startxfr.github.io/helm-repository/charts/project)
monkey_project: 
  enabled: false
  context: 
    <<: *context
  project: 
    enabled: true
    type: project
    name: example-chaos-kubemonkey
    display_name: Chaos - Monkey
    description: Chaos kubemonkey in test suite configured by STARTX

# Configuration of the kubemonkey deployment (see https://github.com/asobti/kube-monkey)
monkey:
  enabled: false
  nameOverride: monkey
  fullnameOverride: example-monkey
  replicaCount: 1
  rbac:
    enabled: true
  image:
    repository: ayushsobti/kube-monkey
    tag: v0.4.1
    pullPolicy: IfNotPresent
  config:
    dryRun: false
    runHour: 8
    startHour: 10
    endHour: 16
    blacklistedNamespaces: [ "kube-system", "openshift-*" ]
    whitelistedNamespaces: [ "default", "demo-*", "example-*" ]
    timeZone: Europe/Paris
  args:
    logLevel: 5
    logDir: /var/log/kube-monkey
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  