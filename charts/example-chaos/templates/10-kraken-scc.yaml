{{- if .Values.kraken.enabled -}}
{{- $root := . -}}
{{- $appName := include "startx.appName" . -}}
{{- $namespace := .Values.kraken_project.project.name -}}
---
kind: SecurityContextConstraints 
apiVersion: security.openshift.io/v1
metadata:
  name: anyuid-kraken
  labels:
    app.kubernetes.io/name: "anyuid-kraken-scc"
    {{- include "example-chaos.labels" $root | nindent 4 }}
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    kubernetes.io/description: 'allows anyuid access to host'
    release.openshift.io/create-only: "true"
# allowHostDirVolumePlugin: true
# allowHostIPC: true
# allowHostNetwork: true
# allowHostPID: true
# allowHostPorts: true
# allowPrivilegeEscalation: true
# allowPrivilegedContainer: true
# allowedCapabilities:
# - '*'
# allowedUnsafeSysctls:
# - '*'
# defaultAddCapabilities: null
# fsGroup:
#   type: RunAsAny
# groups: []
# priority: null
# readOnlyRootFilesystem: false
# requiredDropCapabilities: null
# runAsUser:
#   type: RunAsAny
# seLinuxContext:
#   type: RunAsAny
# seccompProfiles:
# - '*'
# supplementalGroups:
#   type: RunAsAny
# users:
# - system:serviceaccount:{{- $namespace -}}:kraken
# volumes:
# - '*'
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities: null
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups: []
priority: 10
readOnlyRootFilesystem: false
requiredDropCapabilities:
- MKNOD
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:{{- $namespace -}}:kraken
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
{{- end -}}
