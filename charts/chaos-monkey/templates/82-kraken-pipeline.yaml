{{- if .Values.kraken.enabled -}}
{{- $root := . -}}
{{- $appName := include "startx.appName" . -}}
{{- $namespace := .Values.kraken_project.project.name -}}
{{- if eq .Values.kraken.mode "pipeline" -}}{{- if .Values.kraken.pipeline -}}
{{- with .Values.kraken.pipeline }}
---
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: cerberus-check
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "cerberus-check-task"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: cerberus
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/categories: Test
    tekton.dev/displayName: Start a cerberus check
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: cerberus,chaos,test
spec:
  description: >-
    This `task` can be used to check cerberus status as part of a chaos pipeline.

    cerberus watchdog is a good way to get health status of openshift or kubernetes
    cluster. This task allow you to check for cerberus status as part of your 
    chaos infrastructure pipeline.
  params:
    - name: CERBERUS_SERVER
      type: string
      description: Full URL to the cerberus server
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
    - name: TIMEOUT
      type: string
      description: Timeout for the healthcheck performed against the cerberus server
      default: "300"
    - name: FREQUENCY
      type: string
      description: Freqency of the healthcheck in case of bad pulse
      default: "15"
  steps:
    - image: "quay.io/startx/fedora:latest"
      env:
        - name: CERBERUS_URL
          value: $(params.CERBERUS_SERVER)
        - name: CERBERUS_TIMEOUT
          value: $(params.TIMEOUT)
        - name: CERBERUS_FREQUENCY
          value: $(params.FREQUENCY)
      script: |
        #!/usr/bin/env bash
        set -ex

        function checkCerberus {
          curl -s $1 | grep True &> /dev/null
          if [[ "$?" == "0" ]]; then
              echo "Cerberus check is OK at $1"
              return 0
         else
              echo "Cerberus check is KO at $1"
              return 1
          fi
        }

        function loopCheckCerberus {
          timeout=${2:-30}
          step=0
          increment=${3:-5}
          url=${1:-localhost}
          while [ $step -le $timeout ]
          do
            checkCerberus $url
            if [[ "$?" == "0" ]]; then
              exit 0;
            fi
            step=$(( $step + $increment ))
            sleep $increment
          done
          echo "Cerberus check reach ${timeout}s timeout limit"
        }

        echo "Check ${CERBERUS_URL} for ${CERBERUS_TIMEOUT} seconds"
        loopCheckCerberus "${CERBERUS_URL}" "${CERBERUS_TIMEOUT}" "${CERBERUS_FREQUENCY}"
---
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-scenario
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-scenario-task"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/categories: Test
    tekton.dev/displayName: Start a kraken chaos test
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: kraken,chaos,test
spec:
  description: >-
    This `task` can be used to start a kraken chaos scenarios as part of a chaos pipeline.

    kraken chaos testing is a good way to execute chaos testing of openshift or kubernetes
    cluster as well as application running on top of it. This task allow you to use kraken 
    chaos scenarios as part of your application testing pipeline. It can also be part of
    a complete chaos pipeline for your infrastructure layer.
  params:
    - name: AWS_CREDS_SECRET
      type: string
      description: Name of the secret key holding the aws-credentials (mandatory).
      default: kraken-aws-creds
  steps:
    - image: quay.io/chaos-kubox/krkn
      args:
        - python3 run_kraken.py -c config/config.yaml
      command:
        - /bin/sh
        - -c
      env:
        - name: KUBECONFIG
      envFrom:
        - secretRef:
            name: $(params.AWS_CREDS_SECRET)
      resources: {}
      securityContext:
        privileged: true
  workspaces:
    - name: kraken-kubeconfig
      description: The kubeconfig configuration file of the targeted cluster
      mountPath: /root/.kube/config
    - name: kraken-config
      description: The kraken configuration file of chaos scenario to run
      mountPath: /root/kraken/config/config.yaml
    - name: kraken-scenarios
      description: The kraken library with various scenario files
      mountPath: /root/kraken/scenarios
    - name: kraken-config-common-alerts
      description: The kraken startx_alerts ommon library files
      mountPath: /root/kraken/startx_alerts.yaml
    - name: kraken-config-common-metrics
      description: The kraken metrics-aggregated common library files
      mountPath: /root/kraken/metrics-aggregated.yaml
    - name: kraken-config-common-burner
      description: The kraken kube_burner common library files
      mountPath: /root/kraken/kube_burner.yaml
  results:
    - name: report
      description: The final report of the chaos test
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-infra
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-infra-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos infrastructure pipeline
spec:
  params:
    - name: aws_secret_creds
      type: string
      default: "kraken-aws-creds"
      description: ConfigMap name holding the kubeconfig of the targeted cluster
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
      description: Cerberus URL to use for getting cluster health checks
  tasks:
  - name: monitoring-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-monitoring
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: logging-chaos
    runAfter:
      - monitoring-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-logging
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: machines-chaos
    runAfter:
      - logging-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-machines
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: apiserver-chaos
    runAfter:
      - machines-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-apiserver
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: etcd-chaos
    runAfter:
      - apiserver-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-etcd
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: releasemonkey-chaos
    runAfter:
      - etcd-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-releasemonkey
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: time-chaos
    runAfter:
      - releasemonkey-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-time
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: nodes-chaos
    runAfter:
      - time-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-nodes
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: network-chaos
    runAfter:
      - nodes-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-network
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: zone-chaos
    runAfter:
      - network-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-zone
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: storage-chaos
    runAfter:
      - zone-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-storage
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: cluster-chaos
    runAfter:
      - storage-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-cluster
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  - name: logging-cerberus-check
    runAfter:
      - cluster-chaos
    params:
      - name: CERBERUS_SERVER
        value: $(params.cerberus_url)
      - name: TIMEOUT
        value: "180"
      - name: FREQUENCY
        value: "10"
    taskRef:
      kind: Task
      name: cerberus-check
  workspaces:
  - name: kraken-kubeconfig
  - name: kraken-config-monitoring
  - name: kraken-config-logging
  - name: kraken-config-machines
  - name: kraken-config-apiserver
  - name: kraken-config-etcd
  - name: kraken-config-releasemonkey
  - name: kraken-config-time
  - name: kraken-config-nodes
  - name: kraken-config-network
  - name: kraken-config-zone
  - name: kraken-config-storage
  - name: kraken-config-cluster
  - name: kraken-scenarios
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
  - name: kraken-pipeline-persistent
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-infra-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-infra-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-infra
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos infrastructure pipeline
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-infra
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-monitoring
      configMap:
        name: kraken-config-chaos-monitoring
      subPath: config.yaml
    - name: kraken-config-logging
      configMap:
        name: kraken-config-chaos-logging
      subPath: config.yaml
    - name: kraken-config-machines
      configMap:
        name: kraken-config-chaos-machines
      subPath: config.yaml
    - name: kraken-config-apiserver
      configMap:
        name: kraken-config-chaos-apiserver
      subPath: config.yaml
    - name: kraken-config-etcd
      configMap:
        name: kraken-config-chaos-etcd
      subPath: config.yaml
    - name: kraken-config-releasemonkey
      configMap:
        name: kraken-config-chaos-releasemonkey
      subPath: config.yaml
    - name: kraken-config-time
      configMap:
        name: kraken-config-chaos-time
      subPath: config.yaml
    - name: kraken-config-nodes
      configMap:
        name: kraken-config-chaos-nodes
      subPath: config.yaml
    - name: kraken-config-network
      configMap:
        name: kraken-config-chaos-network
      subPath: config.yaml
    - name: kraken-config-zone
      configMap:
        name: kraken-config-chaos-zone
      subPath: config.yaml
    - name: kraken-config-storage
      configMap:
        name: kraken-config-chaos-storage
      subPath: config.yaml
    - name: kraken-config-cluster
      configMap:
        name: kraken-config-chaos-cluster
      subPath: config.yaml
    - name: ephemeral
      emptyDir: {}
    - name: kraken-pipeline-persistent
      volumeClaimTemplate:
        metadata:
          labels:
            app.kubernetes.io/name: "kraken-pipeline-persistent-cache-pvc"
            {{- include "example-chaos.labels" $root | nindent 12 }}
            tekton.dev/pipeline: kraken-chaos-infra
            app.kubernetes.io/part-of: kraken-chaos-infra
            tekton.dev/pipeline: kraken-chaos-infra
            tool: kraken
          annotations:
            {{- include "example-chaos.annotations" $root | nindent 12 }}
            openshift.io/installed-from: startx
            tekton.dev/displayName: Shared cache accros pipeline executions
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 3Gi
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-monitoring
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-monitoring-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift monitoring cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: monitoring-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-monitoring
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-monitoring
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-monitoring-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-monitoring-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-monitoring
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on monitoring cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-monitoring
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-monitoring
      configMap:
        name: kraken-config-chaos-monitoring
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-logging
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-logging-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift logging cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: logging-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-logging
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-logging
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-logging-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-logging-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-logging
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on logging cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-logging
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-logging
      configMap:
        name: kraken-config-chaos-logging
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-machines
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-machines-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift machines cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: machines-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-machines
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-machines
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-machines-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-machines-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-machines
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on machines cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-machines
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-machines
      configMap:
        name: kraken-config-chaos-machines
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-apiserver
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-apiserver-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift apiserver cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: apiserver-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-apiserver
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-apiserver
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-apiserver-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-apiserver-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-apiserver
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on apiserver cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-apiserver
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-apiserver
      configMap:
        name: kraken-config-chaos-apiserver
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-etcd
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-etcd-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift etcd cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: etcd-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-etcd
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-etcd
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-etcd-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-etcd-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-etcd
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on etcd cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-etcd
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-etcd
      configMap:
        name: kraken-config-chaos-etcd
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-time
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-time-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift time cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: time-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-time
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-time
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-time-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-time-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-time
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on time cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-time
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-time
      configMap:
        name: kraken-config-chaos-time
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-releasemonkey
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-releasemonkey-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift releasemonkey cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: releasemonkey-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-releasemonkey
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-releasemonkey
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-releasemonkey-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-releasemonkey-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-releasemonkey
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on releasemonkey cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-releasemonkey
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-releasemonkey
      configMap:
        name: kraken-config-chaos-releasemonkey
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-nodes
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-nodes-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift nodes cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: nodes-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-nodes
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-nodes
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-nodes-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-nodes-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-nodes
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on nodes cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-nodes
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-nodes
      configMap:
        name: kraken-config-chaos-nodes
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-network
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-network-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift network cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: network-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-network
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-network
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-network-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-network-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-network
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on network cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-network
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-network
      configMap:
        name: kraken-config-chaos-network
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-zone
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-zone-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift zone cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: zone-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-zone
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-zone
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-zone-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-zone-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-zone
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on zone cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-zone
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-zone
      configMap:
        name: kraken-config-chaos-zone
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-storage
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-storage-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift storage cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: storage-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-storage
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-storage
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-storage-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-storage-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-storage
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on storage cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-storage
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-storage
      configMap:
        name: kraken-config-chaos-storage
      subPath: config.yaml
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-cluster
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-cluster-pipeline"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Define a kraken chaos pipeline for Openshift cluster cluster service
spec:
  params:
    - name: aws_secret_creds
      description: Secret config for AWS credentials
      type: string
      default: "kraken-aws-creds"
    - name: cerberus_url
      type: string
      default: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  tasks:
  - name: cluster-chaos
    params:
      - name: AWS_CREDS_SECRET
        value: $(params.aws_secret_creds)
    taskRef:
      kind: Task
      name: kraken-scenario
    workspaces:
      - name: kraken-config
        workspace: kraken-config-cluster
      - name: kraken-scenarios
        workspace: kraken-scenarios
      - name: kraken-kubeconfig
        workspace: kraken-kubeconfig
      - name: kraken-config-common-alerts
        workspace: kraken-config-common-alerts
      - name: kraken-config-common-burner
        workspace: kraken-config-common-burner
      - name: kraken-config-common-metrics
        workspace: kraken-config-common-metrics
  workspaces:
  - name: kraken-config-cluster
  - name: kraken-scenarios
  - name: kraken-kubeconfig
  - name: kraken-config-common-metrics
  - name: kraken-config-common-burner
  - name: kraken-config-common-alerts
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-chaos-standalone-cluster-run
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "kraken-chaos-standalone-cluster-pipelinerun"
    {{- include "example-chaos.labels" $root | nindent 4 }}
    tekton.dev/pipeline: kraken-chaos-standalone-cluster
    tool: kraken
  annotations:
    {{- include "example-chaos.annotations" $root | nindent 4 }}
    openshift.io/installed-from: startx
    tekton.dev/displayName: Run a kraken chaos on cluster cluster service
spec:
  params:
    - name: aws_secret_creds
      value: "kraken-aws-creds"
    - name: cerberus_url
      value: "http://cerberus.startx-cerberus.svc.cluster.local:8080"
  pipelineRef:
    name: kraken-chaos-standalone-cluster
  workspaces:
    - name: kraken-kubeconfig
      configMap:
        name: kraken-kubeconfig
      subPath: config
    - name: kraken-scenarios
      configMap:
        name: kraken-scenarios-config
    - name: kraken-config-common-alerts
      configMap:
        name: kraken-config-common
      subPath: startx_alerts.yaml
    - name: kraken-config-common-burner
      configMap:
        name: kraken-config-common
      subPath: kube_burner.yaml
    - name: kraken-config-common-metrics
      configMap:
        name: kraken-config-common
      subPath: metrics-aggregated.yaml
    - name: kraken-config-cluster
      configMap:
        name: kraken-config-chaos-cluster
      subPath: config.yaml
{{- end -}}{{- end -}}{{- end -}}
{{- end -}}
