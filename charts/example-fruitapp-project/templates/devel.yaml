{{- if .Values.devel_chain }}{{- if .Values.devel_chain.enabled }}
{{- $root := . -}}
---
kind: Secret
apiVersion: v1
metadata:
  name: db
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'db'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    app.kubernetes.io/part-of: 'devel'
    app: db
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
stringData:
  database-name: fruitapp
  database-password: mydevel-password
  database-user: mydevel-user
type: Opaque
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: 'db'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'db-deployment'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    app.kubernetes.io/part-of: 'devel'
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app: db
  annotations:
    {{- include "example-fruitapp-project.annotations" $root | nindent 4 }}
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"postgresql:{{- .Values.devel_chain.pg_version }}","namespace":"openshift"},"fieldPath":"spec.template.spec.containers[?(@.name==\"postgresql\")].image","pause":"false"}]'
    argocd.argoproj.io/sync-wave: "10"
    alpha.image.policy.openshift.io/resolve-names: '*'
    openshift.io/generated-by: startx
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: db
        startx.fr/app: db
    spec:
      containers:
        - name: postgresql
          image: "openshift/postgresql:{{- .Values.devel_chain.pg_version }}"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: db
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: db
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: db
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: db-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: db-data
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: 'frontend'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'frontend-deployment'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    app.kubernetes.io/part-of: 'devel'
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {{ include "startx.appName" $root | default "cluster" | quote }} 
    app: frontend
  annotations:
    {{- include "example-fruitapp-project.annotations" $root | nindent 4 }}
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"frontend:latest","namespace":"{{- .Values.project_devel.project.name }}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"postgresql\")].image","pause":"false"}]'
    argocd.argoproj.io/sync-wave: "15"
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"db"}]'
    app.openshift.io/vcs-ref: "devel"
    app.openshift.io/vcs-uri: https://github.com/startxfr/nodejs-rest-http-crud.git
    openshift.io/generated-by: startx
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: frontend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: frontend
        startx.fr/app: frontend
    spec:
      containers:
      - name: frontend
        image: "{{- .Values.project_devel.project.name }}/frontend:latest"
        imagePullPolicy: Always
        env:
        - name: MY_DATABASE_SERVICE_HOST
          value: db
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: database-user
              name: db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: db
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: db
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 7
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 3
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  name: 'db'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'db-service'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    app.kubernetes.io/part-of: 'devel'
    app: db
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    openshift.io/generated-by: startx
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: postgresql
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: db
  sessionAffinity: None
  type: ClusterIP
---
kind: Service
apiVersion: v1
metadata:
  name: 'frontend'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'frontend-service'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    app.kubernetes.io/part-of: 'devel'
    app: frontend
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"db"}]'
    app.openshift.io/vcs-ref: "devel"
    app.openshift.io/vcs-uri: https://github.com/startxfr/nodejs-rest-http-crud.git
    openshift.io/generated-by: startx
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: frontend
  sessionAffinity: None
  type: ClusterIP
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: 'frontend'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'frontend-imagestream'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    app.kubernetes.io/part-of: 'devel'
    app.openshift.io/runtime: nodejs
    app.openshift.io/runtime-version: "{{- .Values.devel_chain.nodejs_version }}"
    app: frontend
  annotations:
    app.openshift.io/vcs-ref: "devel"
    app.openshift.io/vcs-uri: https://github.com/startxfr/nodejs-rest-http-crud.git
    openshift.io/generated-by: startx
spec:
  lookupPolicy:
    local: false
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: 'frontend'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'frontend-pipeline'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    pipeline.openshift.io/runtime: nodejs
    pipeline.openshift.io/runtime-version: "{{- .Values.devel_chain.nodejs_version }}"
    pipeline.openshift.io/type: kubernetes
spec:
  params:
  - default: frontend
    name: APP_NAME
    type: string
  - default: https://github.com/startxfr/nodejs-rest-http-crud.git
    name: GIT_REPO
    type: string
  - default: devel
    name: GIT_REVISION
    type: string
  - default: image-registry.openshift-image-registry.svc:5000/{{- .Values.project_devel.project.name }}/frontend:latest
    name: IMAGE_NAME
    type: string
  - default: .
    name: PATH_CONTEXT
    type: string
  - default: "{{- .Values.devel_chain.nodejs_version }}"
    name: VERSION
    type: string
  tasks:
  - name: fetch-repository
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REVISION)
    - name: subdirectory
      value: ""
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: build
    params:
    - name: IMAGE
      value: $(params.IMAGE_NAME)
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: $(params.PATH_CONTEXT)
    - name: VERSION
      value: $(params.VERSION)
    runAfter:
    - fetch-repository
    taskRef:
      kind: ClusterTask
      name: s2i-nodejs
    workspaces:
    - name: source
      workspace: workspace
  - name: deploy
    params:
    - name: SCRIPT
      value: oc rollout status deploy/$(params.APP_NAME)
    runAfter:
    - build
    taskRef:
      kind: ClusterTask
      name: openshift-client
  workspaces:
  - name: workspace
---
kind: PipelineRun
apiVersion: tekton.dev/v1beta1
metadata:
  name: 'frontend-firstrun'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'frontend-pipelinerun'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
    pipeline.openshift.io/runtime: nodejs
    pipeline.openshift.io/runtime-version: "{{- .Values.devel_chain.nodejs_version }}"
    pipeline.openshift.io/type: kubernetes
    tekton.dev/pipeline: frontend
spec:
  params:
  - name: APP_NAME
    value: frontend
  - name: GIT_REPO
    value: https://github.com/startxfr/nodejs-rest-http-crud.git
  - name: GIT_REVISION
    value: devel
  - name: IMAGE_NAME
    value: image-registry.openshift-image-registry.svc:5000/{{- .Values.project_devel.project.name }}/frontend:latest
  - name: PATH_CONTEXT
    value: .
  - name: VERSION
    value: "{{- .Values.devel_chain.nodejs_version }}"
  pipelineRef:
    name: frontend-devel
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      metadata:
        labels:
          tekton.dev/pipeline: frontend
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: 'frontend'
  namespace: "{{- .Values.project_devel.project.name }}"
  labels:
    app.kubernetes.io/name: 'frontend'
    {{- include "example-fruitapp-project.labels" $root | nindent 4 }}
spec:
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: frontend
    weight: 100
  wildcardPolicy: None
{{- end }}{{- end }}